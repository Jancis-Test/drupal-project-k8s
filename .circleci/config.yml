version: 2
jobs:
  phpcs:
    parallelism: 1
    docker:
      - image: wunderio/circleci-builder:k8s

    steps:
      - checkout

      - run: phpcs --standard=phpcs.xml -s
      
  build:
    parallelism: 1
    docker:
      - image: wunderio/circleci-builder:k8s

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.lock" }}

      - run: composer install -n --prefer-dist --ignore-platform-reqs --no-dev

      - save_cache:
          paths:
            - ./vendor
            - ./web/core
            - ./web/modules/contrib
            - ./web/themes/contrib
            - ./web/profiles/contrib
            - ./web/libraries
          key: v1-dependencies-{{ checksum "composer.lock" }}

      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "yarn.lock" }}
            - v1-yarn-

      - run: yarn install

      - save_cache:
          paths:
            - node_modules
          key: v1-yarn-{{ checksum "yarn.lock" }}

      # Set environment variables for Kontena CLI.
      - run: generate-kontena-config >> $BASH_ENV

      - setup_remote_docker

      # Build the Nginx image and push it to the repository.
      - run: |
          #echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin $DOCKER_REPO_HOST
          echo $GCLOUD_KEY_JSON | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker build -t $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$DOCKER_IMAGE_PREFIX-nginx:$DOCKER_IMAGE_VERSION web
          docker push $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$DOCKER_IMAGE_PREFIX-nginx:$DOCKER_IMAGE_VERSION
      # Build the Drupal image and push it to the repository.
      - run: |
          #echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin $DOCKER_REPO_HOST
          echo $GCLOUD_KEY_JSON | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker build -t $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$DOCKER_IMAGE_PREFIX-drupal:$DOCKER_IMAGE_VERSION .
          docker push $DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$DOCKER_IMAGE_PREFIX-drupal:$DOCKER_IMAGE_VERSION


  deploy:
    parallelism: 1
    docker:
      - image: wunderio/circleci-builder:k8s

    steps:
      - checkout

      - run: |
          echo $GCLOUD_KEY_JSON > ${HOME}/gcloud-service-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
          gcloud config set project silta-204108
          gcloud config set compute/zone europe-west2-a
          gcloud container clusters get-credentials silta-1 --zone europe-west2-a --project silta-204108
          kubectl config get-contexts
          helm init 
          echo $CIRCLE_BRANCH
          echo $CIRCLE_PROJECT_REPONAME
      - run: helm install chart --name $CIRCLE_BRANCH-$CIRCLE_PROJECT_REPONAME

      # Run drush commands within the deployed environment.
#      - run: |
#          bootstrapped=$(kontena service exec $STACK_NAME/drupal -- drush status --field=bootstrap)

#          if [[ $bootstrapped = *'Success'* ]]
#          then
#            kontena service exec $STACK_NAME/drupal -- drush updatedb -n
#            test -d config/sync && kontena service exec $STACK_NAME/drupal -- drush config-import -n
#            kontena service exec $STACK_NAME/drupal -- drush entity-updates -n
#          else
            # Install drupal if needed, alternatively you could import a database dump.
#            kontena service exec $STACK_NAME/drupal -- drush site-install -n config_installer
#          fi

#      - run: |
#          echo "Deployment stack $STACK_NAME successfully, your site is available here: http://$VIRTUALHOST"

  drupal-cron:
    docker:
      - image: wunderio/circleci-builder

    steps:
      # Set environment variables for Kontena CLI.
      - run: generate-kontena-config >> $BASH_ENV

      - run: |
          kontena service exec $STACK_NAME/drupal -- drush cron

workflows:
  version: 2
  commit:
    jobs:
      - phpcs:
          context: dev_wdr_io
      - build:
          context: dev_wdr_io
      - deploy:
          context: dev_wdr_io
          requires: 
            - build

  cron:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - drupal-cron:
          context: dev_wdr_io
