{{- if .Values.backup.enabled }}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-backup
  labels:
    {{- include "drupal.release_labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.backup.schedule | quote }}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            {{- include "drupal.php-container" . | nindent 12 }}
            volumeMounts:
              {{- include "drupal.volumeMounts" . | nindent 14 }}
              - name: backup
                mountPath: /backups
            command: ["/bin/bash", "-c"]
            args:
              - |
                # Generate the id of the backup.
                BACKUP_ID=`date +%Y-%m-%d`
                BACKUP_LOCATION="/backups/$BACKUP_ID-{{ .Values.environmentName }}"

                # Create a folder for the backup
                mkdir -p $BACKUP_LOCATION

                # Take a database dump.
                # TODO: take unsanitized dump
                drush sql-dump --gzip --result-file $BACKUP_LOCATION/db.sql

                {{ range $index, $mount := .Values.mounts -}}
                {{- if eq $mount.enabled true -}}
                # File backup for {{ $index }} volume.
                tar -czP --exclude=css --exclude=js --exclude=styles -f $BACKUP_LOCATION/{{ $index }}.tar.gz {{ $mount.mountPath }}
                {{- end -}}
                {{- end }}

                # Delete old backups
                find /backups/ -mtime +{{ .Values.backup.retention }} -exec rm -r {} \;

                # List content of backup folder
                ls -lh /backups/*
            resources:
              {{- .Values.php.resources | toYaml | nindent 14 }}
          restartPolicy: OnFailure
          volumes:
            {{- include "drupal.volumes" . | nindent 12 }}
            - name: backup
              persistentVolumeClaim:
                claimName: backup


          {{- include "drupal.imagePullSecrets" . | nindent 10 }}
{{- end }}
---